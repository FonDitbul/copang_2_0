generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Seller {
  id       Int    @id @default(autoincrement())
  userId   String @unique @map("user_id") @db.VarChar(40)
  password String @db.VarChar(100)

  ceoName     String @map("ceo_name") @db.VarChar(100)
  companyName String @map("company_name") @db.VarChar(100)
  address     String @db.VarChar(100)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  Products      Product[]
  OrderProducts OrderProduct[]

  @@map("seller")
}

model Buyer {
  id       Int    @id @default(autoincrement())
  userId   String @unique @map("user_id") @db.VarChar(40)
  password String @db.VarChar(100)

  name        String @db.VarChar(100)
  nickName    String @unique @map("nick_name") @db.VarChar(100)
  email       String @unique @db.VarChar(100)
  phoneNumber String @unique @map("phone_number") @db.VarChar(100)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  Carts          Cart[]
  Orders         Order[]
  Reviews        Review[]
  BuyerAddresses BuyerAddress[]
  BuyerCards     BuyerCard[]
  OrderProducts  OrderProduct[]

  @@map("buyer")
}

model BuyerAddress {
  id               Int     @id @default(autoincrement())
  buyerId          Int     @map("buyer_id")
  address          String
  isRepresentative Boolean @map("is_representative")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  Buyer Buyer @relation(fields: [buyerId], references: [id])

  @@map("buyer_address")
}

model BuyerCard {
  id               Int     @id @default(autoincrement())
  buyerId          Int     @map("buyer_id")
  isRepresentative Boolean @map("is_representative")

  bankName       String @map("bank_name") @db.VarChar(100)
  cardType       String @map("card_type") @db.VarChar(100) // 신용, 체크카드
  cardNumber     String @map("card_number") @db.VarChar(100)
  validityPeriod String @map("validity_period") @db.VarChar(5) // 유효 기간 mm/yy

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  Buyer Buyer @relation(fields: [buyerId], references: [id])

  @@map("buyer_card")
}

model Review {
  id      Int    @id @default(autoincrement())
  star    Float
  content String @db.Text

  productId      Int @map("product_id")
  buyerId        Int @map("buyer_id")
  orderProductId Int @unique @map("order_product_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  Product      Product      @relation(fields: [productId], references: [id])
  Buyer        Buyer        @relation(fields: [buyerId], references: [id])
  OrderProduct OrderProduct @relation(fields: [orderProductId], references: [id])

  @@map("review")
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(100)
  code        String  @db.VarChar(100)
  description String  @db.VarChar(100)
  information String  @db.VarChar(100)
  quantity    Int
  cost        Int
  isSale      Boolean @default(true) @map("is_sale")

  sellerId Int @map("seller_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  Reviews       Review[]
  Carts         Cart[]
  OrderProducts OrderProduct[]

  Seller Seller @relation(fields: [sellerId], references: [id])

  @@map("product")
}

model Cart {
  id              Int    @id @default(autoincrement())
  productQuantity Int    @map("product_quantity")
  status          String @db.VarChar(100) // ACTIVE / DONE

  buyerId   Int @map("buyer_id")
  productId Int @map("product_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  Buyer   Buyer   @relation(fields: [buyerId], references: [id])
  Product Product @relation(fields: [productId], references: [id])

  @@map("cart")
}

model Order {
  id   Int    @id @default(autoincrement())
  code String @unique @default(uuid())
  name String @db.VarChar(100)

  buyerId   Int    @map("buyer_id")
  status    String @default("CREATED") @db.VarChar(100) // CREATED / BUY_COMPLETE / REFUNDED / CANCELED
  totalCost Int    @map("total_cost")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  Buyer         Buyer          @relation(fields: [buyerId], references: [id])
  OrderProducts OrderProduct[]
  OrderPayments OrderPayment[]

  @@map("order")
}

model OrderProduct {
  id             Int    @id @default(autoincrement())
  code           String
  cost           Int
  name           String @db.VarChar(100)
  description    String @db.VarChar(100)
  information    String @db.VarChar(100)
  buyQuantity    Int    @map("buy_quantity")
  shippingStatus String @default("PAYMENT_INPROGRESS") @map("shipping_status") @db.VarChar(100) // 결제 진행중 / 배송준비중 / 배송중 / 배송완료
  address        String @db.VarChar(100)

  sellerId  Int  @map("seller_id")
  orderId   Int  @map("order_id")
  productId Int  @map("product_id")
  buyerId   Int  @map("buyer_id")
  reviewId  Int? @map("review_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  Seller  Seller  @relation(fields: [sellerId], references: [id])
  Order   Order   @relation(fields: [orderId], references: [id])
  Product Product @relation(fields: [productId], references: [id])
  Buyer   Buyer   @relation(fields: [buyerId], references: [id])
  Review  Review?

  @@map("order_product")
}

model OrderPayment {
  id             Int    @id @default(autoincrement())
  bankName       String @map("bank_name") @db.VarChar(100)
  cardType       String @map("card_type") @db.VarChar(100) // 신용, 체크카드
  cardNumber     String @map("card_number") @db.VarChar(100)
  validityPeriod String @map("validity_period") @db.VarChar(5) // 유효 기간 mm/yy

  paymentKey  String @map("payment_key") @db.VarChar(100) // 결제의 키 값 랜덤 uuid
  type        String @db.VarChar(100) // 결제 타입 정보 "CARD"
  orderCode   String @map("order_code")
  orderName   String @map("order_name") @db.VarChar(100) // 주문명
  method      String @db.VarChar(100) // "카드", "가상계좌" ,"간편결제" // 현재는 카드만 사용
  totalAmount Int    @map("total_amount")
  status      String @default("READY") @db.VarChar(100) // 결제 처리 상태 // READY, INPROGRESS, DONE, CANCELED

  requestAt  DateTime  @map("request_at") // 결제가 일어난 시간 날짜
  approvedAt DateTime? @map("approved_at") // 결제 승인이 일어난 날짜

  orderId Int @map("order_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  Order Order @relation(fields: [orderId], references: [id])

  @@map("order_payment")
}
